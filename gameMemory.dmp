00001  0000             ;===============================================================================
00002  0001             ; BASIC LOADER
00003  0001             
00004  0001             *=$0801    ; 10 SYS (2064)
00005  0801             
00006  0801  0E 08 0A              BYTE $0E, $08, $0A, $00, $9E, $20, $28, $32
00007  0809  30 36 34              BYTE $30, $36, $34, $29, $00, $00, $00
00008  0810             
00009  0810                        ; OUR CODE STARTS AT $0810 (2064 DECIMAL)
00010  0810                        ; AFTER THE 15 BYTES FOR THE BASIC LOADER
00011  0810             
00012  0810             ;===============================================================================
00013  0810             ; INITIALIZE
00014  0810             
00015  0810                        ; TURN OFF INTERRUPTS TO STOP LIBSCREEN_WAIT FAILING EVERY SO
00016  0810                        ; OFTEN WHEN THE KERNAL INTERRUPT SYNCS UP WITH THE SCANLINE TEST
00017  0810                        ;SEI
00018  0810             
00019  0810                        ; DISABLE RUN/STOP + RESTORE KEYS
00020  0810                        ;LDA #$FC
00021  0810                        ;STA $0328
00022  0810             
00023  0810                        ;SCROLL 38 MODE
00024  0810  AD 16 D0              LDA $D016
00025  0813  29 F7                 AND #$F7 ;ORA #$08
00026  0815  8D 16 D0              STA $D016
00027  0818                        
00028  0818                        ; SET BORDER AND BACKGROUND COLORS
00029  0818                        ; THE LAST 3 PARAMETERS ARE NOT USED YET
00030  0818                        ;     LIBSCREEN_SETCOLORS RED, WHITE, BLACK, BLACK, BLACK
00031  0818             
00032  0818                        ; FILL 1000 BYTES (40X25) OF SCREEN MEMORY
00033  0818                        ;    LIBSCREEN_SET1000 SCREENRAM, 'A' ; 'A' MAPS TO CHAR 1
00034  0818             
00035  0818                        ; FILL 1000 BYTES (40X25) OF COLOR MEMORY
00036  0818                        ;   LIBSCREEN_SET1000 COLORRAM, BLACK
00037  0818             
00038  0818                        
00039  0818             
00040  0818             ;===============================================================================
00041  0818             ; UPDATE
00042  0818             
00043  0818             GMLOOP
00044  0818             
00045  0818                        ;SCROLL 38 MODE
00046  0818  AE 16 D0              LDX $D016
00047  081B  29 F7                 AND #$F7
00048  081D  E8                    INX
00049  081E  8E 16 D0              STX $D016
00050  0821             
00051  0821             
00052  0821                        
00053  0821  A9 01                 LDA #WHITE
00054  0823  8D 86 02              STA $0286
00055  0826  A9 20                 LDA #$20
00056  0828  20 D2 FF              JSR $FFD2
00057  082B  20 D2 FF              JSR $FFD2
00058  082E  20 D2 FF              JSR $FFD2
00059  0831  20 D2 FF              JSR $FFD2
00060  0834  A2 00                 LDX #$00
00061  0836  A0 00                 LDY #$00
00062  0838  20 0C E5              JSR $E50C
00063  083B             
00064  083B  A9 00                 LDA #0
00065  083D  AE 16 D0              LDX $D016
00066  0840  20 CD BD              JSR $BDCD
00067  0843             
00068  0843             
00069  0843             
00070  0843             
00071  0843             
00072  0843             
00073  0843             
00074  0843  A9 FF      @LOOP      LDA #255
00075  0845  CD 12 D0              CMP RASTER
00076  0848  D0 F9                 BNE @LOOP
00077  084A             
00078  084A                        ;INC EXTCOL ; START CODE TIMER CHANGE BORDER COLOR
00079  084A                        ; GAME UPDATE CODE GOES HERE
00080  084A                        ;DEC EXTCOL ; END CODE TIMER RESET BORDER COLOR
00081  084A  4C 18 08              JMP GMLOOP
00082  084D             
00083  084D             
00084  084D             
00085  084D             
00086  084D             
00087  084D             
00088  084D             ;===============================================================================
00089  084D             ; MACROS/SUBROUTINES
00090  084D             
00091  084D             DEFM       LIBMATH_ABS_AA  ; /1 = NUMBER (ADDRESS)
00092  084D                        ; /2 = RESULT (ADDRESS)
00093  084D                        LDA /1
00094  084D                        BPL @POSITIVE
00095  084D                        EOR #$FF        ; INVERT THE BITS
00096  084D                        STA /2
00097  084D                        INC /2          ; ADD 1 TO GIVE THE TWO'S COMPLIMENT
00098  084D                        JMP @DONE
00099  084D             @POSITIVE
00100  084D                        STA /2
00101  084D             @DONE
00102  084D                        ENDM
00103  084D             
00104  084D             ;==============================================================================
00105  084D             
00106  084D             DEFM       LIBMATH_ADD8BIT_AAA
00107  084D                        ; /1 = 1ST NUMBER (ADDRESS)
00108  084D                        ; /2 = 2ND NUMBER (ADDRESS)
00109  084D                        ; /3 = SUM (ADDRESS)
00110  084D                        CLC     ; CLEAR CARRY BEFORE ADD
00111  084D                        LDA /1  ; GET FIRST NUMBER
00112  084D                        ADC /2 ; ADD TO SECOND NUMBER
00113  084D                        STA /3  ; STORE IN SUM
00114  084D                        ENDM
00115  084D             
00116  084D             ;==============================================================================
00117  084D             
00118  084D             DEFM       LIBMATH_ADD8BIT_AVA
00119  084D                        ; /1 = 1ST NUMBER (ADDRESS)
00120  084D                        ; /2 = 2ND NUMBER (VALUE)
00121  084D                        ; /3 = SUM (ADDRESS)
00122  084D                        CLC     ; CLEAR CARRY BEFORE ADD
00123  084D                        LDA /1  ; GET FIRST NUMBER
00124  084D                        ADC #/2 ; ADD TO SECOND NUMBER
00125  084D                        STA /3  ; STORE IN SUM
00126  084D                        ENDM
00127  084D             
00128  084D             ;==============================================================================
00129  084D             
00130  084D             DEFM       LIBMATH_ADD16BIT_AAVAAA
00131  084D                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00132  084D                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00133  084D                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00134  084D                        ; /4 = 2ND NUMBER LOW BYTE (ADDRESS)
00135  084D                        ; /5 = SUM HIGH BYTE (ADDRESS)
00136  084D                        ; /6 = SUM LOW BYTE (ADDRESS)
00137  084D                        CLC     ; CLEAR CARRY BEFORE FIRST ADD
00138  084D                        LDA /2  ; GET LSB OF FIRST NUMBER
00139  084D                        ADC /4  ; ADD LSB OF SECOND NUMBER
00140  084D                        STA /6  ; STORE IN LSB OF SUM
00141  084D                        LDA /1  ; GET MSB OF FIRST NUMBER
00142  084D                        ADC #/3 ; ADD CARRY AND MSB OF NUM2
00143  084D                        STA /5  ; STORE SUM IN MSB OF SUM
00144  084D                        ENDM
00145  084D             
00146  084D             ;==============================================================================
00147  084D             
00148  084D             DEFM       LIBMATH_ADD16BIT_AAVVAA
00149  084D                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00150  084D                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00151  084D                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00152  084D                        ; /4 = 2ND NUMBER LOW BYTE (VALUE)
00153  084D                        ; /5 = SUM HIGH BYTE (ADDRESS)
00154  084D                        ; /6 = SUM LOW BYTE (ADDRESS)
00155  084D                        CLC     ; CLEAR CARRY BEFORE FIRST ADD
00156  084D                        LDA /2  ; GET LSB OF FIRST NUMBER
00157  084D                        ADC #/4 ; ADD LSB OF SECOND NUMBER
00158  084D                        STA /6  ; STORE IN LSB OF SUM
00159  084D                        LDA /1  ; GET MSB OF FIRST NUMBER
00160  084D                        ADC #/3 ; ADD CARRY AND MSB OF NUM2
00161  084D                        STA /5  ; STORE SUM IN MSB OF SUM
00162  084D                        ENDM
00163  084D             
00164  084D             ;==============================================================================
00165  084D             
00166  084D             DEFM       LIBMATH_MIN8BIT_AV      ; /1 = NUMBER 1 (ADDRESS)
00167  084D                        ; /2 = NUMBER 2 (VALUE)
00168  084D                        
00169  084D                        LDA #/2                 ; LOAD NUMBER 2
00170  084D                        CMP /1                  ; COMPARE WITH NUMBER 1
00171  084D                        BCS @SKIP               ; IF NUMBER 2 >= NUMBER 1 THEN SKIP
00172  084D                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00173  084D             @SKIP
00174  084D                        ENDM
00175  084D             
00176  084D             ;==============================================================================
00177  084D             
00178  084D             DEFM       LIBMATH_MAX8BIT_AV      ; /1 = NUMBER 1 (ADDRESS)
00179  084D                        ; /2 = NUMBER 2 (VALUE)
00180  084D                        
00181  084D                        LDA #/2                 ; LOAD NUMBER 2
00182  084D                        CMP /1                  ; COMPARE WITH NUMBER 1
00183  084D                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00184  084D                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00185  084D             @SKIP
00186  084D                        ENDM
00187  084D             
00188  084D             ;==============================================================================
00189  084D             
00190  084D             DEFM       LIBMATH_MIN16BIT_AAVV   ; /1 = NUMBER 1 HIGH (ADDRESS)
00191  084D                        ; /2 = NUMBER 1 LOW (ADDRESS)
00192  084D                        ; /3 = NUMBER 2 HIGH (VALUE)
00193  084D                        ; /4 = NUMBER 2 LOW (VALUE)
00194  084D                        
00195  084D                        ; HIGH BYTE
00196  084D                        LDA /1                  ; LOAD NUMBER 1
00197  084D                        CMP #/3                 ; COMPARE WITH NUMBER 2
00198  084D                        BMI @SKIP               ; IF NUMBER 1 < NUMBER 2 THEN SKIP
00199  084D                        LDA #/3
00200  084D                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00201  084D             
00202  084D                        ; LOW BYTE
00203  084D                        LDA #/4                 ; LOAD NUMBER 2
00204  084D                        CMP /2                  ; COMPARE WITH NUMBER 1
00205  084D                        BCS @SKIP               ; IF NUMBER 2 >= NUMBER 1 THEN SKIP
00206  084D                        STA /2                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00207  084D             @SKIP
00208  084D                        ENDM
00209  084D             
00210  084D             ;==============================================================================
00211  084D             
00212  084D             DEFM       LIBMATH_MAX16BIT_AAVV   ; /1 = NUMBER 1 HIGH (ADDRESS)
00213  084D                        ; /2 = NUMBER 1 LOW (ADDRESS)
00214  084D                        ; /3 = NUMBER 2 HIGH (VALUE)
00215  084D                        ; /4 = NUMBER 2 LOW (VALUE)
00216  084D                        
00217  084D                        ; HIGH BYTE
00218  084D                        LDA #/3                 ; LOAD NUMBER 2
00219  084D                        CMP /1                  ; COMPARE WITH NUMBER 1
00220  084D                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00221  084D                        STA /1                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00222  084D             
00223  084D                        ; LOW BYTE
00224  084D                        LDA #/4                 ; LOAD NUMBER 2
00225  084D                        CMP /2                  ; COMPARE WITH NUMBER 1
00226  084D                        BCC @SKIP               ; IF NUMBER 2 < NUMBER 1 THEN SKIP
00227  084D                        STA /2                  ; ELSE REPLACE NUMBER1 WITH NUMBER2
00228  084D             
00229  084D             @SKIP
00230  084D                        ENDM
00231  084D             
00232  084D             ;==============================================================================
00233  084D             
00234  084D             DEFM       LIBMATH_SUB8BIT_AAA
00235  084D                        ; /1 = 1ST NUMBER (ADDRESS)
00236  084D                        ; /2 = 2ND NUMBER (ADDRESS)
00237  084D                        ; /3 = SUM (ADDRESS)
00238  084D                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00239  084D                        LDA /1  ; GET FIRST NUMBER
00240  084D                        SBC /2  ; SUBTRACT SECOND NUMBER
00241  084D                        STA /3  ; STORE IN SUM
00242  084D                        ENDM
00243  084D             
00244  084D             ;==============================================================================
00245  084D             
00246  084D             DEFM       LIBMATH_SUB8BIT_AVA
00247  084D                        ; /1 = 1ST NUMBER (ADDRESS)
00248  084D                        ; /2 = 2ND NUMBER (VALUE)
00249  084D                        ; /3 = SUM (ADDRESS)
00250  084D                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00251  084D                        LDA /1  ; GET FIRST NUMBER
00252  084D                        SBC #/2 ; SUBTRACT SECOND NUMBER
00253  084D                        STA /3  ; STORE IN SUM
00254  084D                        ENDM
00255  084D             
00256  084D             ;==============================================================================
00257  084D             
00258  084D             DEFM       LIBMATH_SUB16BIT_AAVAAA
00259  084D                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00260  084D                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00261  084D                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00262  084D                        ; /4 = 2ND NUMBER LOW BYTE (ADDRESS)
00263  084D                        ; /5 = SUM HIGH BYTE (ADDRESS)
00264  084D                        ; /6 = SUM LOW BYTE (ADDRESS)
00265  084D                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00266  084D                        LDA /2  ; GET LSB OF FIRST NUMBER
00267  084D                        SBC /4 ; SUBTRACT LSB OF SECOND NUMBER
00268  084D                        STA /6  ; STORE IN LSB OF SUM
00269  084D                        LDA /1  ; GET MSB OF FIRST NUMBER
00270  084D                        SBC #/3 ; SUBTRACT BORROW AND MSB OF NUM2
00271  084D                        STA /5  ; STORE SUM IN MSB OF SUM
00272  084D                        ENDM
00273  084D             
00274  084D             ;==============================================================================
00275  084D             
00276  084D             DEFM       LIBMATH_SUB16BIT_AAVVAA
00277  084D                        ; /1 = 1ST NUMBER HIGH BYTE (ADDRESS)
00278  084D                        ; /2 = 1ST NUMBER LOW BYTE (ADDRESS)
00279  084D                        ; /3 = 2ND NUMBER HIGH BYTE (VALUE)
00280  084D                        ; /4 = 2ND NUMBER LOW BYTE (VALUE)
00281  084D                        ; /5 = SUM HIGH BYTE (ADDRESS)
00282  084D                        ; /6 = SUM LOW BYTE (ADDRESS)
00283  084D                        SEC     ; SEC IS THE SAME AS CLEAR BORROW
00284  084D                        LDA /2  ; GET LSB OF FIRST NUMBER
00285  084D                        SBC #/4 ; SUBTRACT LSB OF SECOND NUMBER
00286  084D                        STA /6  ; STORE IN LSB OF SUM
00287  084D                        LDA /1  ; GET MSB OF FIRST NUMBER
00288  084D                        SBC #/3 ; SUBTRACT BORROW AND MSB OF NUM2
00289  084D                        STA /5  ; STORE SUM IN MSB OF SUM
00290  084D                        ENDM
00291  084D             
00292  084D             ;===============================================================================
00293  084D             ; CONSTANTS
00294  084D             
00295  084D             BLACK      = 0
00296  084D             WHITE      = 1
00297  084D             RED        = 2
00298  084D             CYAN       = 3
00299  084D             PURPLE     = 4
00300  084D             GREEN      = 5
00301  084D             BLUE       = 6
00302  084D             YELLOW     = 7
00303  084D             ORANGE     = 8
00304  084D             BROWN      = 9
00305  084D             LIGHTRED   = 10
00306  084D             DARKGRAY   = 11
00307  084D             MEDIUMGRAY = 12
00308  084D             LIGHTGREEN = 13
00309  084D             LIGHTBLUE  = 14
00310  084D             LIGHTGRAY  = 15
00311  084D             SPACECHARACTER = 32
00312  084D             
00313  084D             FALSE      = 0
00314  084D             TRUE       = 1
00315  084D             
00316  084D             ;===============================================================================
00317  084D             ; VARIABLES
00318  084D             
00319  084D             OPERATOR   CALC
00320  084D             
00321  084D             SCREENRAMROWSTARTLOW ;  SCREENRAM + 40*0, 40*1, 40*2 ... 40*24
00322  084D  00 28 50              BYTE <SCREENRAM,     <SCREENRAM+40,  <SCREENRAM+80
00323  0850  78 A0 C8              BYTE <SCREENRAM+120, <SCREENRAM+160, <SCREENRAM+200
00324  0853  F0 18 40              BYTE <SCREENRAM+240, <SCREENRAM+280, <SCREENRAM+320
00325  0856  68 90 B8              BYTE <SCREENRAM+360, <SCREENRAM+400, <SCREENRAM+440
00326  0859  E0 08 30              BYTE <SCREENRAM+480, <SCREENRAM+520, <SCREENRAM+560
00327  085C  58 80 A8              BYTE <SCREENRAM+600, <SCREENRAM+640, <SCREENRAM+680
00328  085F  D0 F8 20              BYTE <SCREENRAM+720, <SCREENRAM+760, <SCREENRAM+800
00329  0862  48 70 98              BYTE <SCREENRAM+840, <SCREENRAM+880, <SCREENRAM+920
00330  0865  C0                    BYTE <SCREENRAM+960
00331  0866             
00332  0866             SCREENRAMROWSTARTHIGH ;  SCREENRAM + 40*0, 40*1, 40*2 ... 40*24
00333  0866  04 04 04              BYTE >SCREENRAM,     >SCREENRAM+40,  >SCREENRAM+80
00334  0869  04 04 04              BYTE >SCREENRAM+120, >SCREENRAM+160, >SCREENRAM+200
00335  086C  04 05 05              BYTE >SCREENRAM+240, >SCREENRAM+280, >SCREENRAM+320
00336  086F  05 05 05              BYTE >SCREENRAM+360, >SCREENRAM+400, >SCREENRAM+440
00337  0872  05 06 06              BYTE >SCREENRAM+480, >SCREENRAM+520, >SCREENRAM+560
00338  0875  06 06 06              BYTE >SCREENRAM+600, >SCREENRAM+640, >SCREENRAM+680
00339  0878  06 06 07              BYTE >SCREENRAM+720, >SCREENRAM+760, >SCREENRAM+800
00340  087B  07 07 07              BYTE >SCREENRAM+840, >SCREENRAM+880, >SCREENRAM+920
00341  087E  07                    BYTE >SCREENRAM+960
00342  087F             
00343  087F             COLORRAMROWSTARTLOW ;  COLORRAM + 40*0, 40*1, 40*2 ... 40*24
00344  087F  00 28 50              BYTE <COLORRAM,     <COLORRAM+40,  <COLORRAM+80
00345  0882  78 A0 C8              BYTE <COLORRAM+120, <COLORRAM+160, <COLORRAM+200
00346  0885  F0 18 40              BYTE <COLORRAM+240, <COLORRAM+280, <COLORRAM+320
00347  0888  68 90 B8              BYTE <COLORRAM+360, <COLORRAM+400, <COLORRAM+440
00348  088B  E0 08 30              BYTE <COLORRAM+480, <COLORRAM+520, <COLORRAM+560
00349  088E  58 80 A8              BYTE <COLORRAM+600, <COLORRAM+640, <COLORRAM+680
00350  0891  D0 F8 20              BYTE <COLORRAM+720, <COLORRAM+760, <COLORRAM+800
00351  0894  48 70 98              BYTE <COLORRAM+840, <COLORRAM+880, <COLORRAM+920
00352  0897  C0                    BYTE <COLORRAM+960
00353  0898             
00354  0898             COLORRAMROWSTARTHIGH ;  COLORRAM + 40*0, 40*1, 40*2 ... 40*24
00355  0898  D8 D8 D8              BYTE >COLORRAM,     >COLORRAM+40,  >COLORRAM+80
00356  089B  D8 D8 D8              BYTE >COLORRAM+120, >COLORRAM+160, >COLORRAM+200
00357  089E  D8 D9 D9              BYTE >COLORRAM+240, >COLORRAM+280, >COLORRAM+320
00358  08A1  D9 D9 D9              BYTE >COLORRAM+360, >COLORRAM+400, >COLORRAM+440
00359  08A4  D9 DA DA              BYTE >COLORRAM+480, >COLORRAM+520, >COLORRAM+560
00360  08A7  DA DA DA              BYTE >COLORRAM+600, >COLORRAM+640, >COLORRAM+680
00361  08AA  DA DA DB              BYTE >COLORRAM+720, >COLORRAM+760, >COLORRAM+800
00362  08AD  DB DB DB              BYTE >COLORRAM+840, >COLORRAM+880, >COLORRAM+920
00363  08B0  DB                    BYTE >COLORRAM+960
00364  08B1             
00365  08B1             OPERATOR   HILO
00366  08B1             
00367  08B1  00         SCREENCOLUMN BYTE 0
00368  08B2  00         SCREENSCROLLXVALUE BYTE 0
00369  08B3             
00370  08B3             ;===============================================================================
00371  08B3             ; MACROS/SUBROUTINES
00372  08B3             
00373  08B3             DEFM       LIBSCREEN_DEBUG8BIT_VVA
00374  08B3                        ; /1 = X POSITION ABSOLUTE
00375  08B3                        ; /2 = Y POSITION ABSOLUTE
00376  08B3                        ; /3 = 1ST NUMBER LOW BYTE POINTER
00377  08B3                        
00378  08B3                        LDA #WHITE
00379  08B3                        STA $0286       ; SET TEXT COLOR
00380  08B3                        LDA #$20        ; SPACE
00381  08B3                        JSR $FFD2       ; PRINT 4 SPACES
00382  08B3                        JSR $FFD2
00383  08B3                        JSR $FFD2
00384  08B3                        JSR $FFD2
00385  08B3                        ;JSR $E566      ; RESET CURSOR
00386  08B3                        LDX #/2         ; SELECT ROW
00387  08B3                        LDY #/1         ; SELECT COLUMN
00388  08B3                        JSR $E50C       ; SET CURSOR
00389  08B3             
00390  08B3                        LDA #0
00391  08B3                        LDX /3
00392  08B3                        JSR $BDCD       ; PRINT NUMBER
00393  08B3                        ENDM
00394  08B3             
00395  08B3             ;===============================================================================
00396  08B3             
00397  08B3             DEFM       LIBSCREEN_DEBUG16BIT_VVAA
00398  08B3                        ; /1 = X POSITION ABSOLUTE
00399  08B3                        ; /2 = Y POSITION ABSOLUTE
00400  08B3                        ; /3 = 1ST NUMBER HIGH BYTE POINTER
00401  08B3                        ; /4 = 1ST NUMBER LOW BYTE POINTER
00402  08B3                        
00403  08B3                        LDA #WHITE
00404  08B3                        STA $0286       ; SET TEXT COLOR
00405  08B3                        LDA #$20        ; SPACE
00406  08B3                        JSR $FFD2       ; PRINT 4 SPACES
00407  08B3                        JSR $FFD2
00408  08B3                        JSR $FFD2
00409  08B3                        JSR $FFD2
00410  08B3                        ;JSR $E566      ; RESET CURSOR
00411  08B3                        LDX #/2         ; SELECT ROW
00412  08B3                        LDY #/1         ; SELECT COLUMN
00413  08B3                        JSR $E50C       ; SET CURSOR
00414  08B3             
00415  08B3                        LDA /3
00416  08B3                        LDX /4
00417  08B3                        JSR $BDCD       ; PRINT NUMBER
00418  08B3                        ENDM
00419  08B3             
00420  08B3             ;==============================================================================
00421  08B3             
00422  08B3             DEFM       LIBSCREEN_DRAWTEXT_AAAV ; /1 = X POSITION 0-39 (ADDRESS)
00423  08B3                        ; /2 = Y POSITION 0-24 (ADDRESS)
00424  08B3                        ; /3 = 0 TERMINATED STRING (ADDRESS)
00425  08B3                        ; /4 = TEXT COLOR (VALUE)
00426  08B3             
00427  08B3                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00428  08B3                        
00429  08B3                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00430  08B3                        STA ZEROPAGELOW
00431  08B3             
00432  08B3                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00433  08B3                        STA ZEROPAGEHIGH
00434  08B3             
00435  08B3                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00436  08B3             
00437  08B3                        LDX #0
00438  08B3             @LOOP      LDA /3,X
00439  08B3                        CMP #0
00440  08B3                        BEQ @DONE
00441  08B3                        STA (ZEROPAGELOW),Y
00442  08B3                        INX
00443  08B3                        INY
00444  08B3                        JMP @LOOP
00445  08B3             @DONE
00446  08B3             
00447  08B3             
00448  08B3                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00449  08B3                        
00450  08B3                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00451  08B3                        STA ZEROPAGELOW
00452  08B3             
00453  08B3                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00454  08B3                        STA ZEROPAGEHIGH
00455  08B3             
00456  08B3                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00457  08B3             
00458  08B3                        LDX #0
00459  08B3             @LOOP2     LDA /3,X
00460  08B3                        CMP #0
00461  08B3                        BEQ @DONE2
00462  08B3                        LDA #/4
00463  08B3                        STA (ZEROPAGELOW),Y
00464  08B3                        INX
00465  08B3                        INY
00466  08B3                        JMP @LOOP2
00467  08B3             @DONE2
00468  08B3             
00469  08B3                        ENDM
00470  08B3             
00471  08B3             ;===============================================================================
00472  08B3             
00473  08B3             DEFM       LIBSCREEN_DRAWDECIMAL_AAAV ; /1 = X POSITION 0-39 (ADDRESS)
00474  08B3                        ; /2 = Y POSITION 0-24 (ADDRESS)
00475  08B3                        ; /3 = DECIMAL NUMBER 2 NYBBLES (ADDRESS)
00476  08B3                        ; /4 = TEXT COLOR (VALUE)
00477  08B3             
00478  08B3                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00479  08B3                        
00480  08B3                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00481  08B3                        STA ZEROPAGELOW
00482  08B3             
00483  08B3                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00484  08B3                        STA ZEROPAGEHIGH
00485  08B3             
00486  08B3                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00487  08B3             
00488  08B3                        ; GET HIGH NYBBLE
00489  08B3                        LDA /3
00490  08B3                        AND #$F0
00491  08B3                        
00492  08B3                        ; CONVERT TO ASCII
00493  08B3                        LSR
00494  08B3                        LSR
00495  08B3                        LSR
00496  08B3                        LSR
00497  08B3                        ORA #$30
00498  08B3             
00499  08B3                        STA (ZEROPAGELOW),Y
00500  08B3             
00501  08B3                        ; MOVE ALONG TO NEXT SCREEN POSITION
00502  08B3                        INY
00503  08B3             
00504  08B3                        ; GET LOW NYBBLE
00505  08B3                        LDA /3
00506  08B3                        AND #$0F
00507  08B3             
00508  08B3                        ; CONVERT TO ASCII
00509  08B3                        ORA #$30
00510  08B3             
00511  08B3                        STA (ZEROPAGELOW),Y
00512  08B3                        
00513  08B3             
00514  08B3                        ; NOW SET THE COLORS
00515  08B3                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00516  08B3                        
00517  08B3                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00518  08B3                        STA ZEROPAGELOW
00519  08B3             
00520  08B3                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00521  08B3                        STA ZEROPAGEHIGH
00522  08B3             
00523  08B3                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00524  08B3             
00525  08B3                        LDA #/4
00526  08B3                        STA (ZEROPAGELOW),Y
00527  08B3             
00528  08B3                        ; MOVE ALONG TO NEXT SCREEN POSITION
00529  08B3                        INY
00530  08B3                        
00531  08B3                        STA (ZEROPAGELOW),Y
00532  08B3             
00533  08B3                        ENDM
00534  08B3             
00535  08B3             ;==============================================================================
00536  08B3             
00537  08B3             DEFM       LIBSCREEN_GETCHAR  ; /1 = RETURN CHARACTER CODE (ADDRESS)
00538  08B3                        LDA (ZEROPAGELOW),Y
00539  08B3                        STA /1
00540  08B3                        ENDM
00541  08B3             
00542  08B3             ;===============================================================================
00543  08B3             
00544  08B3             DEFM       LIBSCREEN_PIXELTOCHAR_AAVAVAAAA
00545  08B3                        ; /1 = XHIGHPIXELS      (ADDRESS)
00546  08B3                        ; /2 = XLOWPIXELS       (ADDRESS)
00547  08B3                        ; /3 = XADJUST          (VALUE)
00548  08B3                        ; /4 = YPIXELS          (ADDRESS)
00549  08B3                        ; /5 = YADJUST          (VALUE)
00550  08B3                        ; /6 = XCHAR            (ADDRESS)
00551  08B3                        ; /7 = XOFFSET          (ADDRESS)
00552  08B3                        ; /8 = YCHAR            (ADDRESS)
00553  08B3                        ; /9 = YOFFSET          (ADDRESS)
00554  08B3                        
00555  08B3             
00556  08B3                        LDA /1
00557  08B3                        STA ZEROPAGEPARAM1
00558  08B3                        LDA /2
00559  08B3                        STA ZEROPAGEPARAM2
00560  08B3                        LDA #/3
00561  08B3                        STA ZEROPAGEPARAM3
00562  08B3                        LDA /4
00563  08B3                        STA ZEROPAGEPARAM4
00564  08B3                        LDA #/5
00565  08B3                        STA ZEROPAGEPARAM5
00566  08B3                        
00567  08B3                        JSR LIBSCREEN_PIXELTOCHAR
00568  08B3             
00569  08B3                        LDA ZEROPAGEPARAM6
00570  08B3                        STA /6
00571  08B3                        LDA ZEROPAGEPARAM7
00572  08B3                        STA /7
00573  08B3                        LDA ZEROPAGEPARAM8
00574  08B3                        STA /8
00575  08B3                        LDA ZEROPAGEPARAM9
00576  08B3                        STA /9
00577  08B3             
00578  08B3                        ENDM
00579  08B3             
00580  08B3             LIBSCREEN_PIXELTOCHAR 
00581  08B3             
00582  08B3                        ; SUBTRACT XADJUST PIXELS FROM XPIXELS AS LEFT OF A SPRITE IS FIRST VISIBLE AT X = 24
00583  08B3             
00584  08B3             
00585  08B3  38                    SEC
00586  08B4  A5 74                 LDA ZEROPAGEPARAM2
00587  08B6  E5 75                 SBC ZEROPAGEPARAM3
00588  08B8  85 79                 STA ZEROPAGEPARAM7
00589  08BA  A5 73                 LDA ZEROPAGEPARAM1
00590  08BC  E9 00                 SBC #0
00591  08BE  85 78                 STA ZEROPAGEPARAM6
00592  08C0             
00593  08C0             
00594  08C0             
00595  08C0             
00596  08C0             
00597  08C0             
00598  08C0             
00599  08C0  A5 78                 LDA ZEROPAGEPARAM6
00600  08C2  85 02                 STA ZEROPAGETEMP
00601  08C4             
00602  08C4                        ; DIVIDE BY 8 TO GET CHARACTER X
00603  08C4  A5 79                 LDA ZEROPAGEPARAM7
00604  08C6  4A                    LSR A ; DIVIDE BY 2
00605  08C7  4A                    LSR A ; AND AGAIN = /4
00606  08C8  4A                    LSR A ; AND AGAIN = /8
00607  08C9  85 78                 STA ZEROPAGEPARAM6
00608  08CB             
00609  08CB                        ; AND 7 TO GET PIXEL OFFSET X
00610  08CB  A5 79                 LDA ZEROPAGEPARAM7
00611  08CD  29 07                 AND #7
00612  08CF  85 79                 STA ZEROPAGEPARAM7
00613  08D1             
00614  08D1                        ; ADJUST FOR XHIGH
00615  08D1  A5 02                 LDA ZEROPAGETEMP
00616  08D3  F0 07                 BEQ @NOTHIGH
00617  08D5             
00618  08D5             
00619  08D5  18                    CLC
00620  08D6  A5 78                 LDA ZEROPAGEPARAM6
00621  08D8  69 20                 ADC #32
00622  08DA  85 78                 STA ZEROPAGEPARAM6
00623  08DC             
00624  08DC             
00625  08DC             
00626  08DC             
00627  08DC             @NOTHIGH
00628  08DC                        ; SUBTRACT YADJUST PIXELS FROM YPIXELS AS TOP OF A SPRITE IS FIRST VISIBLE AT Y = 50
00629  08DC             
00630  08DC             
00631  08DC  38                    SEC
00632  08DD  A5 76                 LDA ZEROPAGEPARAM4
00633  08DF  E5 77                 SBC ZEROPAGEPARAM5
00634  08E1  85 7B                 STA ZEROPAGEPARAM9
00635  08E3             
00636  08E3             
00637  08E3             
00638  08E3             
00639  08E3             
00640  08E3                        ; DIVIDE BY 8 TO GET CHARACTER Y
00641  08E3  A5 7B                 LDA ZEROPAGEPARAM9
00642  08E5  4A                    LSR A ; DIVIDE BY 2
00643  08E6  4A                    LSR A ; AND AGAIN = /4
00644  08E7  4A                    LSR A ; AND AGAIN = /8
00645  08E8  85 7A                 STA ZEROPAGEPARAM8
00646  08EA             
00647  08EA                        ; AND 7 TO GET PIXEL OFFSET Y
00648  08EA  A5 7B                 LDA ZEROPAGEPARAM9
00649  08EC  29 07                 AND #7
00650  08EE  85 7B                 STA ZEROPAGEPARAM9
00651  08F0             
00652  08F0  60                    RTS
00653  08F1             
00654  08F1             ;==============================================================================
00655  08F1             
00656  08F1             DEFM       LIBSCREEN_SCROLLXLEFT_A          ; /1 = UPDATE SUBROUTINE (ADDRESS)
00657  08F1             
00658  08F1                        DEC SCREENSCROLLXVALUE
00659  08F1                        LDA SCREENSCROLLXVALUE
00660  08F1                        AND #%00000111
00661  08F1                        STA SCREENSCROLLXVALUE
00662  08F1             
00663  08F1                        LDA SCROLX
00664  08F1                        AND #%11111000
00665  08F1                        ORA SCREENSCROLLXVALUE
00666  08F1                        STA SCROLX
00667  08F1             
00668  08F1                        LDA SCREENSCROLLXVALUE
00669  08F1                        CMP #7
00670  08F1                        BNE @FINISHED
00671  08F1             
00672  08F1                        ; MOVE TO NEXT COLUMN
00673  08F1                        INC SCREENCOLUMN
00674  08F1                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
00675  08F1             @FINISHED
00676  08F1             
00677  08F1                        ENDM
00678  08F1             
00679  08F1             ;==============================================================================
00680  08F1             
00681  08F1             DEFM       LIBSCREEN_SCROLLXRIGHT_A         ; /1 = UPDATE SUBROUTINE (ADDRESS)
00682  08F1             
00683  08F1                        INC SCREENSCROLLXVALUE
00684  08F1                        LDA SCREENSCROLLXVALUE
00685  08F1                        AND #%00000111
00686  08F1                        STA SCREENSCROLLXVALUE
00687  08F1             
00688  08F1                        LDA SCROLX
00689  08F1                        AND #%11111000
00690  08F1                        ORA SCREENSCROLLXVALUE
00691  08F1                        STA SCROLX
00692  08F1             
00693  08F1                        LDA SCREENSCROLLXVALUE
00694  08F1                        CMP #0
00695  08F1                        BNE @FINISHED
00696  08F1             
00697  08F1                        ; MOVE TO PREVIOUS COLUMN
00698  08F1                        DEC SCREENCOLUMN
00699  08F1                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
00700  08F1             @FINISHED
00701  08F1             
00702  08F1                        ENDM
00703  08F1             
00704  08F1             ;==============================================================================
00705  08F1             
00706  08F1             DEFM       LIBSCREEN_SCROLLXRESET_A         ; /1 = UPDATE SUBROUTINE (ADDRESS)
00707  08F1             
00708  08F1                        LDA #0
00709  08F1                        STA SCREENCOLUMN
00710  08F1                        STA SCREENSCROLLXVALUE
00711  08F1             
00712  08F1                        LDA SCROLX
00713  08F1                        AND #%11111000
00714  08F1                        ORA SCREENSCROLLXVALUE
00715  08F1                        STA SCROLX
00716  08F1             
00717  08F1                        JSR /1 ; CALL THE PASSED IN FUNCTION TO UPDATE THE SCREEN ROWS
00718  08F1             
00719  08F1                        ENDM
00720  08F1             
00721  08F1             ;==============================================================================
00722  08F1             
00723  08F1             DEFM       LIBSCREEN_SETSCROLLXVALUE_A     ; /1 = SCROLLX VALUE (ADDRESS)
00724  08F1             
00725  08F1                        LDA SCROLX
00726  08F1                        AND #%11111000
00727  08F1                        ORA /1
00728  08F1                        STA SCROLX
00729  08F1             
00730  08F1                        ENDM
00731  08F1             
00732  08F1             ;==============================================================================
00733  08F1             
00734  08F1             DEFM       LIBSCREEN_SETSCROLLXVALUE_V     ; /1 = SCROLLX VALUE (VALUE)
00735  08F1             
00736  08F1                        LDA SCROLX
00737  08F1                        AND #%11111000
00738  08F1                        ORA #/1
00739  08F1                        STA SCROLX
00740  08F1             
00741  08F1                        ENDM
00742  08F1             
00743  08F1             ;==============================================================================
00744  08F1             
00745  08F1             ; SETS 1000 BYTES OF MEMORY FROM START ADDRESS WITH A VALUE
00746  08F1             DEFM       LIBSCREEN_SET1000       ; /1 = START  (ADDRESS)
00747  08F1                        ; /2 = NUMBER (VALUE)
00748  08F1             
00749  08F1                        LDA #/2                 ; GET NUMBER TO SET
00750  08F1                        LDX #250                ; SET LOOP VALUE
00751  08F1             @LOOP      DEX                     ; STEP -1
00752  08F1                        STA /1,X                ; SET START + X
00753  08F1                        STA /1+250,X            ; SET START + 250 + X
00754  08F1                        STA /1+500,X            ; SET START + 500 + X
00755  08F1                        STA /1+750,X            ; SET START + 750 + X
00756  08F1                        BNE @LOOP               ; IF X<>0 LOOP
00757  08F1             
00758  08F1                        ENDM
00759  08F1             
00760  08F1             ;==============================================================================
00761  08F1             
00762  08F1             DEFM       LIBSCREEN_SET38COLUMNMODE
00763  08F1             
00764  08F1                        LDA SCROLX
00765  08F1                        AND #%11110111 ; CLEAR BIT 3
00766  08F1                        STA SCROLX
00767  08F1             
00768  08F1                        ENDM
00769  08F1             
00770  08F1             ;==============================================================================
00771  08F1             
00772  08F1             DEFM       LIBSCREEN_SET40COLUMNMODE
00773  08F1             
00774  08F1                        LDA SCROLX
00775  08F1                        ORA #%00001000 ; SET BIT 3
00776  08F1                        STA SCROLX
00777  08F1             
00778  08F1                        ENDM
00779  08F1             
00780  08F1             ;==============================================================================
00781  08F1             
00782  08F1             DEFM       LIBSCREEN_SETCHARMEMORY  ; /1 = CHARACTER MEMORY SLOT (VALUE)
00783  08F1                        ; POINT VIC (LOWER 4 BITS OF $D018)TO NEW CHARACTER DATA
00784  08F1                        LDA VMCSB
00785  08F1                        AND #%11110000 ; KEEP HIGHER 4 BITS
00786  08F1                        ; P208 M JONG BOOK
00787  08F1                        ORA #/1;$0E ; MAPS TO  $3800 MEMORY ADDRESS
00788  08F1                        STA VMCSB
00789  08F1                        ENDM
00790  08F1             
00791  08F1             ;==============================================================================
00792  08F1             
00793  08F1             DEFM       LIBSCREEN_SETCHAR_V  ; /1 = CHARACTER CODE (VALUE)
00794  08F1                        LDA #/1
00795  08F1                        STA (ZEROPAGELOW),Y
00796  08F1                        ENDM
00797  08F1             
00798  08F1             ;==============================================================================
00799  08F1             
00800  08F1             DEFM       LIBSCREEN_SETCHAR_A  ; /1 = CHARACTER CODE (ADDRESS)
00801  08F1                        LDA /1
00802  08F1                        STA (ZEROPAGELOW),Y
00803  08F1                        ENDM
00804  08F1             
00805  08F1             ;==============================================================================
00806  08F1             
00807  08F1             DEFM       LIBSCREEN_SETCHARPOSITION_AA    ; /1 = X POSITION 0-39 (ADDRESS)
00808  08F1                        ; /2 = Y POSITION 0-24 (ADDRESS)
00809  08F1                        
00810  08F1                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00811  08F1                        
00812  08F1                        LDA SCREENRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00813  08F1                        STA ZEROPAGELOW
00814  08F1             
00815  08F1                        LDA SCREENRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00816  08F1                        STA ZEROPAGEHIGH
00817  08F1             
00818  08F1                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00819  08F1             
00820  08F1                        ENDM
00821  08F1             
00822  08F1             ;==============================================================================
00823  08F1             
00824  08F1             DEFM       LIBSCREEN_SETCOLORPOSITION_AA   ; /1 = X POSITION 0-39 (ADDRESS)
00825  08F1                        ; /2 = Y POSITION 0-24 (ADDRESS)
00826  08F1                        
00827  08F1                        LDY /2 ; LOAD Y POSITION AS INDEX INTO LIST
00828  08F1                        
00829  08F1                        LDA COLORRAMROWSTARTLOW,Y ; LOAD LOW ADDRESS BYTE
00830  08F1                        STA ZEROPAGELOW
00831  08F1             
00832  08F1                        LDA COLORRAMROWSTARTHIGH,Y ; LOAD HIGH ADDRESS BYTE
00833  08F1                        STA ZEROPAGEHIGH
00834  08F1             
00835  08F1                        LDY /1 ; LOAD X POSITION INTO Y REGISTER
00836  08F1             
00837  08F1                        ENDM
00838  08F1             
00839  08F1             ;===============================================================================
00840  08F1             
00841  08F1             ; SETS THE BORDER AND BACKGROUND COLORS
00842  08F1             DEFM       LIBSCREEN_SETCOLORS     ; /1 = BORDER COLOR       (VALUE)
00843  08F1                        ; /2 = BACKGROUND COLOR 0 (VALUE)
00844  08F1                        ; /3 = BACKGROUND COLOR 1 (VALUE)
00845  08F1                        ; /4 = BACKGROUND COLOR 2 (VALUE)
00846  08F1                        ; /5 = BACKGROUND COLOR 3 (VALUE)
00847  08F1                        
00848  08F1                        LDA #/1                 ; COLOR0 -> A
00849  08F1                        STA EXTCOL              ; A -> EXTCOL
00850  08F1                        LDA #/2                 ; COLOR1 -> A
00851  08F1                        STA BGCOL0              ; A -> BGCOL0
00852  08F1                        LDA #/3                 ; COLOR2 -> A
00853  08F1                        STA BGCOL1              ; A -> BGCOL1
00854  08F1                        LDA #/4                 ; COLOR3 -> A
00855  08F1                        STA BGCOL2              ; A -> BGCOL2
00856  08F1                        LDA #/5                 ; COLOR4 -> A
00857  08F1                        STA BGCOL3              ; A -> BGCOL3
00858  08F1             
00859  08F1                        ENDM
00860  08F1             
00861  08F1             ;==============================================================================
00862  08F1             
00863  08F1             DEFM       LIBSCREEN_SETMULTICOLORMODE
00864  08F1             
00865  08F1                        LDA SCROLX
00866  08F1                        ORA #%00010000 ; SET BIT 5
00867  08F1                        STA SCROLX
00868  08F1             
00869  08F1                        ENDM
00870  08F1             
00871  08F1             ;===============================================================================
00872  08F1             
00873  08F1             ; WAITS FOR A GIVEN SCANLINE
00874  08F1             DEFM       LIBSCREEN_WAIT_V        ; /1 = SCANLINE (VALUE)
00875  08F1             
00876  08F1             @LOOP      LDA #/1                 ; SCANLINE -> A
00877  08F1                        CMP RASTER              ; COMPARE A TO CURRENT RASTER LINE
00878  08F1                        BNE @LOOP               ; LOOP IF RASTER LINE NOT REACHED 255
00879  08F1             
00880  08F1                        ENDM
00881  08F1             
00882  08F1             
00883  08F1             
00884  08F1             ;===============================================================================
00885  08F1             ; $00-$FF  PAGE ZERO (256 BYTES)
00886  08F1                        
00887  08F1                        ; $00-$01   RESERVED FOR IO
00888  08F1             ZEROPAGETEMP = $02
00889  08F1                        ; $03-$8F   RESERVED FOR BASIC
00890  08F1                        ; USING $73-$8A CHRGET AS BASIC NOT USED FOR OUR GAME
00891  08F1             ZEROPAGEPARAM1 = $73
00892  08F1             ZEROPAGEPARAM2 = $74
00893  08F1             ZEROPAGEPARAM3 = $75
00894  08F1             ZEROPAGEPARAM4 = $76
00895  08F1             ZEROPAGEPARAM5 = $77
00896  08F1             ZEROPAGEPARAM6 = $78
00897  08F1             ZEROPAGEPARAM7 = $79
00898  08F1             ZEROPAGEPARAM8 = $7A
00899  08F1             ZEROPAGEPARAM9 = $7B
00900  08F1                        ; $90-$FA   RESERVED FOR KERNAL
00901  08F1             ZEROPAGELOW = $FB
00902  08F1             ZEROPAGEHIGH = $FC
00903  08F1             ZEROPAGELOW2 = $FD
00904  08F1             ZEROPAGEHIGH2 = $FE
00905  08F1                        ; $FF       RESERVED FOR KERNAL
00906  08F1             
00907  08F1             ;===============================================================================
00908  08F1             ; $0100-$01FF  STACK (256 BYTES)
00909  08F1             
00910  08F1             
00911  08F1             ;===============================================================================
00912  08F1             ; $0200-$9FFF  RAM (40K)
00913  08F1             
00914  08F1             SCREENRAM  = $0400
00915  08F1             SPRITE0    = $07F8
00916  08F1             
00917  08F1             ; $0801
00918  08F1             ; GAME CODE IS PLACED HERE BY USING THE *=$0801 DIRECTIVE
00919  08F1             ; IN GAMEMAIN.ASM
00920  08F1             
00921  08F1             
00922  08F1             ;===============================================================================
00923  08F1             ; $A000-$BFFF  BASIC ROM (8K)
00924  08F1             
00925  08F1             
00926  08F1             ;===============================================================================
00927  08F1             ; $C000-$CFFF  RAM (4K)
00928  08F1             
00929  08F1             
00930  08F1             ;===============================================================================
00931  08F1             ; $D000-$DFFF  IO (4K)
00932  08F1             
00933  08F1             ; THESE ARE SOME OF THE C64 REGISTERS THAT ARE MAPPED INTO
00934  08F1             ; IO MEMORY SPACE
00935  08F1             ; NAMES TAKEN FROM 'MAPPING THE COMMODORE 64' BOOK
00936  08F1             
00937  08F1             SP0X       = $D000
00938  08F1             SP0Y       = $D001
00939  08F1             MSIGX      = $D010
00940  08F1             RASTER     = $D012
00941  08F1             SPENA      = $D015
00942  08F1             SCROLX     = $D016
00943  08F1             VMCSB      = $D018
00944  08F1             SPBGPR     = $D01B
00945  08F1             SPMC       = $D01C
00946  08F1             SPSPCL     = $D01E
00947  08F1             EXTCOL     = $D020
00948  08F1             BGCOL0     = $D021
00949  08F1             BGCOL1     = $D022
00950  08F1             BGCOL2     = $D023
00951  08F1             BGCOL3     = $D024
00952  08F1             SPMC0      = $D025
00953  08F1             SPMC1      = $D026
00954  08F1             SP0COL     = $D027
00955  08F1             FRELO1     = $D400 ;(54272)
00956  08F1             FREHI1     = $D401 ;(54273)
00957  08F1             PWLO1      = $D402 ;(54274)
00958  08F1             PWHI1      = $D403 ;(54275)
00959  08F1             VCREG1     = $D404 ;(54276)
00960  08F1             ATDCY1     = $D405 ;(54277)
00961  08F1             SUREL1     = $D406 ;(54278)
00962  08F1             FRELO2     = $D407 ;(54279)
00963  08F1             FREHI2     = $D408 ;(54280)
00964  08F1             PWLO2      = $D409 ;(54281)
00965  08F1             PWHI2      = $D40A ;(54282)
00966  08F1             VCREG2     = $D40B ;(54283)
00967  08F1             ATDCY2     = $D40C ;(54284)
00968  08F1             SUREL2     = $D40D ;(54285)
00969  08F1             FRELO3     = $D40E ;(54286)
00970  08F1             FREHI3     = $D40F ;(54287)
00971  08F1             PWLO3      = $D410 ;(54288)
00972  08F1             PWHI3      = $D411 ;(54289)
00973  08F1             VCREG3     = $D412 ;(54290)
00974  08F1             ATDCY3     = $D413 ;(54291)
00975  08F1             SUREL3     = $D414 ;(54292)
00976  08F1             SIGVOL     = $D418 ;(54296)
00977  08F1             COLORRAM   = $D800
00978  08F1             CIAPRA     = $DC00
00979  08F1             CIAPRB     = $DC01
00980  08F1             
00981  08F1             ;===============================================================================
00982  08F1             ; $E000-$FFFF  KERNAL ROM (8K)
00983  08F1             
00984  08F1             
00985  08F1             ;===============================================================================
00986  08F1             

******* 9 Label(s) *******
~~~loop{00001} = $0843 
ColorRAMRowStartHigh = $0898 
ColorRAMRowStartLow = $087F 
gMLoop = $0818 
libScreen_PixelToChar = $08B3 
screenColumn = $08B1 
ScreenRAMRowStartHigh = $0866 
ScreenRAMRowStartLow = $084D 
screenScrollXValue = $08B2 

******* 8 Unused label(s) *******
@nothigh
~~~loop{00001}
ColorRAMRowStartHigh
ColorRAMRowStartLow
libScreen_PixelToChar
screenColumn
ScreenRAMRowStartHigh
ScreenRAMRowStartLow
screenScrollXValue

******* 79 Variable(s) *******
ATDCY1  = $D405
ATDCY2  = $D40C
ATDCY3  = $D413
BGCOL0  = $D021
BGCOL1  = $D022
BGCOL2  = $D023
BGCOL3  = $D024
Black  = $0000
Blue  = $0006
Brown  = $0009
CIAPRA  = $DC00
CIAPRB  = $DC01
COLORRAM  = $D800
Cyan  = $0003
DarkGray  = $000B
EXTCOL  = $D020
False  = $0000
FREHI1  = $D401
FREHI2  = $D408
FREHI3  = $D40F
FRELO1  = $D400
FRELO2  = $D407
FRELO3  = $D40E
Green  = $0005
LightBlue  = $000E
LightGray  = $000F
LightGreen  = $000D
LightRed  = $000A
MediumGray  = $000C
MSIGX  = $D010
Orange  = $0008
Purple  = $0004
PWHI1  = $D403
PWHI2  = $D40A
PWHI3  = $D411
PWLO1  = $D402
PWLO2  = $D409
PWLO3  = $D410
RASTER  = $D012
Red  = $0002
SCREENRAM  = $0400
SCROLX  = $D016
SIGVOL  = $D418
SP0COL  = $D027
SP0X  = $D000
SP0Y  = $D001
SpaceCharacter  = $0020
SPBGPR  = $D01B
SPENA  = $D015
SPMC  = $D01C
SPMC0  = $D025
SPMC1  = $D026
SPRITE0  = $07F8
SPSPCL  = $D01E
SUREL1  = $D406
SUREL2  = $D40D
SUREL3  = $D414
tgt_c64  = $0001
True  = $0001
VCREG1  = $D404
VCREG2  = $D40B
VCREG3  = $D412
VMCSB  = $D018
White  = $0001
Yellow  = $0007
ZeroPageHigh  = $00FC
ZeroPageHigh2  = $00FE
ZeroPageLow  = $00FB
ZeroPageLow2  = $00FD
ZeroPageParam1  = $0073
ZeroPageParam2  = $0074
ZeroPageParam3  = $0075
ZeroPageParam4  = $0076
ZeroPageParam5  = $0077
ZeroPageParam6  = $0078
ZeroPageParam7  = $0079
ZeroPageParam8  = $007A
ZeroPageParam9  = $007B
ZeroPageTemp  = $0002
******* 68 Unused variables(s) *******
ATDCY1
ATDCY2
ATDCY3
BGCOL0
BGCOL1
BGCOL2
BGCOL3
Black
Blue
Brown
CIAPRA
CIAPRB
COLORRAM
Cyan
DarkGray
EXTCOL
False
FREHI1
FREHI2
FREHI3
FRELO1
FRELO2
FRELO3
Green
LightBlue
LightGray
LightGreen
LightRed
MediumGray
MSIGX
Orange
Purple
PWHI1
PWHI2
PWHI3
PWLO1
PWLO2
PWLO3
RASTER
Red
SCREENRAM
SCROLX
SIGVOL
SP0COL
SP0X
SP0Y
SpaceCharacter
SPBGPR
SPENA
SPMC
SPMC0
SPMC1
SPRITE0
SPSPCL
SUREL1
SUREL2
SUREL3
tgt_c64
True
VCREG1
VCREG2
VCREG3
VMCSB
White
Yellow
ZeroPageHigh
ZeroPageHigh2
ZeroPageLow
ZeroPageLow2

